from django.shortcuts import render
import random
from datetime import datetime
from rest_framework import views
from .models import Alert
from .serializers import AlertSerializer
from django.http import FileResponse, JsonResponse
import json
import pandas as pd
from sys import path
from pathlib import Path
from django.conf import settings
#This import is to get the free disk of the user
#remember to do pip install psutil
import psutil
# from .backend import serverMain
# # sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), os.path.pardir)))
# from .backend import ingestConfig
import sys;
from django.views.decorators.http import require_GET

import os
# path.insert(0,'../backend')

from threading import Thread
from .backend.ingestConfig import get_LNIDS_config #used to parse config file
from .backend.serverMain import serverMain # used to call/start serverMain
from django.core.files.storage import FileSystemStorage

@require_GET
#This function is used to locate the directory of the nodeMap.txt file generated by the configFile parser
#It will read its contents, store each line in an array and pass the array to the AJAX request in NetworkInfo.html
def get_file_content(request):
    try: 
        base_path = os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))  # Update with your file path
        filename = os.path.join(base_path, 'BACKEND', 'nodeMap.txt')

        print(f"Absolute path: {os.path.abspath(filename)}")
        with open(filename, 'r', encoding='utf-8') as file:
            contents = file.read()

        arr = contents.split('\n')

        return JsonResponse({'data': arr})
    
    except Exception as e:
        print(f"An error occurred: {e}")
        return JsonResponse({'error': 'Internal Server Error'}, status=500)

# This method needs to be called after uploading config.
# config filepath needs to be passed in as a parameter to serverMain()
def startServer():
    serverMain(False)
    get_LNIDS_config()

def insertRecords(num):
    alert_users = ['Cris', 'Lianna', 'Edgar', 'Maria', 'Aldo', 'Edmundo', 'Daniel', 'Martin']
    reasonList = ['Port Scan', 'Failed Login', 'Unknown IP']
    portsList = ['80', '443' '1244', '22', '3211', '22444', '932']
    srcIPList = ['173.123.104.77', '33.149.184.47', '252.155.228.241', '60.125.174.149','41.248.208.21', '192.119.65.165']
    dstIPList = ['192.168.110.32', '192.168.110.34', '192.168.110.27']
    severityList = ['1','2','3','4']
    protocolList = ['TCP', 'FTP', 'UDP', 'RDP']
    infoList = ['HTTP/1.1 200 OK', '[TCP ZeroWindowProbe] 80 → 49201 [ACK] Seq=147105 Ack=524 Win=64240 Len=1 [TCP segment of a reassembled PDU]', '55527 → 5357 [SYN] Seq=0 Win=1024 Len=0 MSS=1460','DHCP ACK - Transaction ID 0x84ab3e19']
    filenameList = ['emptyDummy1.pcap','emptyDummy2.pcap','emptyDummy3.pcap']

    #make records with randomized data from the lists above for specified # records
    for i in range(num):
        alert_id=i+1
        time = datetime.now()
        pLength = random.randrange(1001)
        dstIP = random.choice(dstIPList)
        srcIP = random.choice(srcIPList)
        dstPort = random.choice(portsList)
        srcPort = random.choice(portsList)
        protocol = random.choice(protocolList)
        severity = random.choice(severityList)
        reason = random.choice(reasonList)
        info = random.choice(infoList)
        filename = random.choice(filenameList)
        user_id= random.choice(alert_users)

        pak=Alert(alert_id=alert_id,severity_level=severity,time=time ,length=pLength, ip_dst=dstIP,ip_src=srcIP,port_dst=dstPort,port_src=srcPort,
                  protocol=protocol,descripton=reason,info=info,filename=filename,user_id=user_id ,)
        pak.save()

def getAlert():
    objects = Alert.objects.all()
    return objects


def NetworkInfo(request):
    disk_usage = psutil.disk_usage('/')
    free_space_gb = round(disk_usage.free / (2**30), 2)
    context={
        'free_space': free_space_gb
    }
    return render(request, 'NetworkInfo.html', context)


def viewAlerts(request):

    thread = Thread(target=serverMain)
    thread.start()

    alerts=getAlert()

    disk_usage = psutil.disk_usage('/')
    free_space_gb = round(disk_usage.free / (2**30), 2)
    
    print("Getting records")
    context={
        'alerts': alerts,
        'free_space': free_space_gb
    }
    return render(request, 'viewAlerts.html',context)


# def configServer(request):
#     if request.method == 'POST' and request.FILES['myfile']:
#         myfile = request.FILES['myfile']
#         fs = FileSystemStorage()
#         filename = fs.save(myfile.name, myfile)
#         uploaded_file_url = fs.url(filename)
#         print(uploaded_file_url)
#     return render(request, 'configServer.html')
def configServer(request):
    if request.method == 'POST' and request.FILES['myfile']:
        myfile = request.FILES['myfile']
        fs = FileSystemStorage()
        filename = fs.save(myfile.name, myfile)
        file_path = str(fs.path(filename))
        print(file_path)
        thread = Thread(target=serverMain, args=(file_path,))
        thread.start()
        return render(request, 'NetworkInfo.html')
        # absolute_path = fs.path(filename)
        # print(absolute_path)
        # Optionally, pass the absolute path to the template
        # return render(request, 'configServer.html', {'file_path': absolute_path})
        # get_LNIDS_config(myfile)

    
    disk_usage = psutil.disk_usage('/')
    free_space_gb = round(disk_usage.free / (2**30), 2)

    context={
        'free_space': free_space_gb
    }

    return render(request, 'configServer.html', context)


def configComplete(request):
    #startServer()
    return render(request, 'configComplete.html')
def table(request):
    alerts=getAlert()
    
    print("Records generated")
    context={
        'alerts': alerts
    }
    return render(request, 'table.html',context)

class AlertViewset(views.APIView):
    queryset = Alert.objects
    serializer_class = AlertSerializer
    # renderer_classes = renderers.JSONRenderer

    # get
    def get(self, request, *args, **kwargs):
        query_type = request.GET.dict()
        queryset = Alert.objects.all()
        serialized_data = self.serializer_class(
            queryset,
            many=True
            # context={'request': request}
        )
        if query_type.get('type') == "json":
            file = open('data.json', 'w+')
            json.dump(serialized_data.data, file)
            file.close()
            return FileResponse(open('data.json', 'rb'), as_attachment=True)
        elif query_type.get('type') == "csv":
            data_frame = pd.DataFrame(serialized_data.data)
            data_frame.to_csv("data.csv")
            return FileResponse(open("data.csv", "rb"), as_attachment=True)
        elif query_type.get('type') == "xml":
            data_frame = pd.DataFrame(serialized_data.data)
            data_frame.to_xml("data.xml")
            return FileResponse(open("data.xml", "rb"), as_attachment=True)
        # return response.Response(serialized_data.data)
        return JsonResponse({'message': "type was not specified in query"}, status=401)